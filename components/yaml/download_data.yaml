# PIPELINE DEFINITION
# Name: upload-dataset
# Inputs:
#    bucket_name: str
#    source_blob_name: str
# Outputs:
#    df: system.Dataset
components:
  comp-upload-dataset:
    executorLabel: exec-upload-dataset
    inputDefinitions:
      parameters:
        bucket_name:
          parameterType: STRING
        source_blob_name:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        df:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-upload-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_dataset(bucket_name: str, source_blob_name: str, df: Output[Dataset]):\n\
          \    from google.cloud import storage\n    import pandas as pd\n    from\
          \ io import StringIO\n\n    storage_client = storage.Client()\n\n    bucket\
          \ = storage_client.bucket(bucket_name)\n    blob = bucket.blob(source_blob_name)\n\
          \n    content = blob.download_as_string()\n    data = pd.read_csv(StringIO(content.decode('utf-8')))\n\
          \n    data.to_csv(df.path, index=False)\n\n"
        image: python:3.11
pipelineInfo:
  name: upload-dataset
root:
  dag:
    outputs:
      artifacts:
        df:
          artifactSelectors:
          - outputArtifactKey: df
            producerSubtask: upload-dataset
    tasks:
      upload-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-dataset
        inputs:
          parameters:
            bucket_name:
              componentInputParameter: bucket_name
            source_blob_name:
              componentInputParameter: source_blob_name
        taskInfo:
          name: upload-dataset
  inputDefinitions:
    parameters:
      bucket_name:
        parameterType: STRING
      source_blob_name:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      df:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
