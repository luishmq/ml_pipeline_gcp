# PIPELINE DEFINITION
# Name: split-data
# Inputs:
#    dataset: system.Dataset
# Outputs:
#    test_data: system.Dataset
#    train_data: system.Dataset
components:
  comp-split-data:
    executorLabel: exec-split-data
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-split-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - split_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef split_data(dataset: Input[Dataset], train_data: Output[Dataset],\
          \ test_data: Output[Dataset]):\n    import pandas as pd\n    from sklearn.model_selection\
          \ import train_test_split\n\n    data = pd.read_csv(dataset.path)\n\n  \
          \  train, test = train_test_split(data, test_size=0.2, random_state=42)\n\
          \n    train.to_csv(train_data.path, index=False)\n    test.to_csv(test_data.path,\
          \ index=False)\n\n"
        image: python:3.11
pipelineInfo:
  name: split-data
root:
  dag:
    outputs:
      artifacts:
        test_data:
          artifactSelectors:
          - outputArtifactKey: test_data
            producerSubtask: split-data
        train_data:
          artifactSelectors:
          - outputArtifactKey: train_data
            producerSubtask: split-data
    tasks:
      split-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-split-data
        inputs:
          artifacts:
            dataset:
              componentInputArtifact: dataset
        taskInfo:
          name: split-data
  inputDefinitions:
    artifacts:
      dataset:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      test_data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      train_data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
