# PIPELINE DEFINITION
# Name: training
# Inputs:
#    train_data: system.Dataset
# Outputs:
#    trained_model: system.Model
components:
  comp-training:
    executorLabel: exec-training
    inputDefinitions:
      artifacts:
        train_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        trained_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-training:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - training
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'pycaret'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef training(train_data: Input[Dataset], trained_model: Output[Model]):\n\
          \    import pandas as pd\n    from pycaret.regression import setup, tune_model,\
          \ save_model, compare_models\n\n    data = pd.read_csv(train_data.path)\n\
          \n    setup(data, target='price', normalize=True, normalize_method='minmax',\
          \ ignore_features=['cityCode'] , session_id=123) \n\n    best_model = compare_models()\n\
          \n    tuned_model = tune_model(best_model)\n\n    save_model(tuned_model,\
          \ trained_model.path)\n\n"
        image: python:3.11
pipelineInfo:
  name: training
root:
  dag:
    outputs:
      artifacts:
        trained_model:
          artifactSelectors:
          - outputArtifactKey: trained_model
            producerSubtask: training
    tasks:
      training:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-training
        inputs:
          artifacts:
            train_data:
              componentInputArtifact: train_data
        taskInfo:
          name: training
  inputDefinitions:
    artifacts:
      train_data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      trained_model:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
