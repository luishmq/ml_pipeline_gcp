# PIPELINE DEFINITION
# Name: evaluate-model
# Inputs:
#    input_data: system.Dataset
#    trained_model: system.Model
# Outputs:
#    evaluation_report: system.Dataset
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        input_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        trained_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        evaluation_report:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'pycaret'\
          \ 'scikit-learn' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(input_data: Input[Dataset], trained_model: Input[Model],\
          \ evaluation_report: Output[Dataset]):\n    import pandas as pd\n    from\
          \ pycaret.regression import RegressionExperiment, load_model, predict_model\n\
          \    from sklearn.metrics import mean_absolute_error, mean_squared_error,\
          \ r2_score\n\n    data = pd.read_csv(input_data.path)\n\n    model = load_model(trained_model.path)\n\
          \n    predictions = predict_model(model, data=data)\n\n    y_true = data['price']\n\
          \    y_pred = predictions['prediction_label']\n\n    mae = mean_absolute_error(y_true,\
          \ y_pred)\n    mse = mean_squared_error(y_true, y_pred)\n    r2 = r2_score(y_true,\
          \ y_pred)\n\n    report = pd.DataFrame({\n        'Metric': ['MAE', 'MSE',\
          \ 'R2'],\n        'Value': [mae, mse, r2]\n    })\n\n    report.to_csv(evaluation_report.path,\
          \ index=False)\n\n"
        image: python:3.11
pipelineInfo:
  name: evaluate-model
root:
  dag:
    outputs:
      artifacts:
        evaluation_report:
          artifactSelectors:
          - outputArtifactKey: evaluation_report
            producerSubtask: evaluate-model
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        inputs:
          artifacts:
            input_data:
              componentInputArtifact: input_data
            trained_model:
              componentInputArtifact: trained_model
        taskInfo:
          name: evaluate-model
  inputDefinitions:
    artifacts:
      input_data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      trained_model:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      evaluation_report:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
