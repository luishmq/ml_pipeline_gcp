# PIPELINE DEFINITION
# Name: evaluate-model
# Inputs:
#    deployment_metric: str
#    deployment_metric_threshold: float
#    model: system.Model
#    target_column_name: str
#    test_data: system.Dataset
# Outputs:
#    deploy_flag: str
#    evaluate-model-kpi: system.Metrics
#    kpi: system.Metrics
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        deployment_metric:
          parameterType: STRING
        deployment_metric_threshold:
          parameterType: NUMBER_DOUBLE
        target_column_name:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        kpi:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
      parameters:
        deploy_flag:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'pyarrow'\
          \ 'scikit-learn' 'fsspec' 'gcsfs' 'xgboost' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(\n    test_data: Input[Dataset],\n    model: Input[Model],\
          \ \n    target_column_name: str,\n    deployment_metric: str,\n    deployment_metric_threshold:\
          \ float,\n    kpi: Output[Metrics]\n) -> NamedTuple(\n    \"Outputs\",\n\
          \    [\n        (\"deploy_flag\", str),  \n    ],\n):\n    print(f\"test_data:\
          \ {test_data}\")\n    print(f\"model: {model}\")\n    print(f\"kpi: {kpi}\"\
          )\n    print(f\"deployment_metric: {deployment_metric}\")\n    print(f\"\
          deployment_metric_threshold: {deployment_metric_threshold}\")\n\n    from\
          \ sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error,\
          \ mean_absolute_percentage_error\n    import pandas as pd\n    import pickle\n\
          \    import numpy as np\n\n    test_ds = pd.read_csv(test_data.path)\n \
          \   target = target_column_name\n\n    x_test = test_ds.drop(columns=target,\
          \ axis=1)\n    y_test = test_ds[target]\n\n    print(f\"model.path: {model.path}\"\
          )\n    file_name = model.path + \".pkl\"\n    print(f\"file_name: {file_name}\"\
          )\n\n    with open(file_name, 'rb') as file:  \n        loaded_model = pickle.load(file)\n\
          \n    y_pred = loaded_model.predict(x_test)\n    r2 = r2_score(y_true=y_test,\
          \ y_pred=y_pred)\n    mae = mean_absolute_error(y_true=y_test, y_pred=y_pred)\n\
          \    mse = mean_squared_error(y_true=y_test, y_pred=y_pred)\n    mape =\
          \ mean_absolute_percentage_error(y_true=y_test, y_pred=y_pred)\n    rmse\
          \ = np.sqrt(mse)\n\n    model_metrics = {\n        \"r2\": r2,\n       \
          \ \"mae\": mae,\n        \"mape\": mape,\n        \"mse\": mse,\n      \
          \  \"rmse\": rmse\n    }\n\n    print(f\"Adjusted_R2: {r2}\")\n    print(f\"\
          Mean Absolute Error: {mae}\")\n    print(f\"Mean Absolute Percentage Error:\
          \ {round(mape, 4) * 100}%\")\n    print(f\"Mean Squared Error: {mse}\")\n\
          \    print(f\"Root Mean Squared Error: {rmse}\")\n\n    kpi.log_metric(\"\
          Adjusted_R2\", float(r2))\n    kpi.log_metric(\"Mean Absolute Error\", float(mae))\n\
          \    kpi.log_metric(\"Mean Absolute Percentage Error\", float(mape))\n \
          \   kpi.log_metric(\"Mean Squared Error\", float(mse))\n    kpi.log_metric(\"\
          Root Mean Squared Error\", float(rmse))\n\n    actual_metric_value = model_metrics.get(deployment_metric)\n\
          \n    if deployment_metric in [\"r2\"]:\n        deploy_flag = \"True\"\
          \ if actual_metric_value >= deployment_metric_threshold else \"False\"\n\
          \    else:\n        deploy_flag = \"True\" if actual_metric_value <= deployment_metric_threshold\
          \ else \"False\"\n\n    return (deploy_flag,)\n\n"
        image: python:3.11
pipelineInfo:
  name: evaluate-model
root:
  dag:
    outputs:
      artifacts:
        evaluate-model-kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: evaluate-model
        kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: evaluate-model
      parameters:
        deploy_flag:
          valueFromParameter:
            outputParameterKey: deploy_flag
            producerSubtask: evaluate-model
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        inputs:
          artifacts:
            model:
              componentInputArtifact: model
            test_data:
              componentInputArtifact: test_data
          parameters:
            deployment_metric:
              componentInputParameter: deployment_metric
            deployment_metric_threshold:
              componentInputParameter: deployment_metric_threshold
            target_column_name:
              componentInputParameter: target_column_name
        taskInfo:
          name: evaluate-model
  inputDefinitions:
    artifacts:
      model:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
      test_data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    parameters:
      deployment_metric:
        parameterType: STRING
      deployment_metric_threshold:
        parameterType: NUMBER_DOUBLE
      target_column_name:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      evaluate-model-kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
    parameters:
      deploy_flag:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
